// Script to deploy the DON token and Donation contract using an EOA/dev wallet
// This script uses ethers.js v5

const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

/**
 * Updates the frontend with the deployed Don and Donation contract addresses
 * It also copies the ABI and bytecode files to the frontend
 * @param {string} donAddress The address of the deployed DON token
 * @param {string} donationAddress The address of the deployed Donation contract
 */
async function updateFrontendAddresses(donAddress, donationAddress) {
  console.log("\nUpdating frontend with deployed contract addresses...");

  // Get the network name from environment or default to base-sepolia
  const network = process.env.NETWORK || "base-sepolia";
  
  // Define the path for the server utility file
  const frontendDir = path.join(__dirname, "../../../poscidondao_frontend");
  const serverUtilPath = path.join(frontendDir, "src/app/utils/serverConfig.ts");
  
  // Define paths for ABI and bytecode directories
  const frontendAbiDir = path.join(frontendDir, "src/app/abi");
  const frontendBytecodeDir = path.join(frontendDir, "src/app/abi/bytecode");
  
  // Check if the frontend directory exists
  if (!fs.existsSync(frontendDir)) {
    console.log(`Frontend directory not found at ${frontendDir}`);
    console.log("Skipping frontend update. Please update the frontend manually.");
    return;
  }
  
  // Check if the server config file exists
  if (!fs.existsSync(serverUtilPath)) {
    console.log(`Server config file not found at ${serverUtilPath}`);
    console.log("Creating a new server config file with only Don and Donation addresses.");
    
    // Create a basic server config file with only Don and Donation addresses
    const basicServerConfig = `'use server';

// This file is auto-generated by the deployDonationSystem script
// Last updated: ${new Date().toISOString()}
// Network: ${network}

const ALCHEMY_KEY = process.env.ALCHEMY_KEY_PROTOCOL ?? '';
const PRIVATE_KEY = process.env.PRIVATE_KEY ?? '';

export async function getRpcUrl() {
  return \`https://base-sepolia.g.alchemy.com/v2/\${ALCHEMY_KEY}\`;
};

export async function getPrivateKey() {
  return PRIVATE_KEY;
};

export async function getNetworkInfo() {
  const rpcUrl = await getRpcUrl();
  return {
    chainId: ${network === "base-sepolia" ? "84532" : "8453"},
    providerUrl: \`\${rpcUrl}\`,
    explorerLink: '${network === "base-sepolia" ? "https://sepolia.basescan.org" : "https://basescan.org"}',
    don: '${donAddress}',
    donation: '${donationAddress}',
  };
};
`;
    
    // Create directory if it doesn't exist
    const serverUtilsDir = path.dirname(serverUtilPath);
    if (!fs.existsSync(serverUtilsDir)) {
      fs.mkdirSync(serverUtilsDir, { recursive: true });
    }
    
    // Write the basic server config file
    fs.writeFileSync(serverUtilPath, basicServerConfig);
    console.log(`Created new server config file at: ${serverUtilPath}`);
  } else {
    // Read the existing server config file
    console.log(`Reading existing server config file from: ${serverUtilPath}`);
    let serverConfigContent = fs.readFileSync(serverUtilPath, 'utf8');
    
    // Add a comment to indicate the file was updated
    const updateComment = `// Updated by deployDonationSystem script on ${new Date().toISOString()}`;
    if (!serverConfigContent.includes('// Updated by deployDonationSystem')) {
      // Add the comment after the first line (which should be 'use server')
      const lines = serverConfigContent.split('\n');
      lines.splice(1, 0, updateComment);
      serverConfigContent = lines.join('\n');
    } else {
      // Replace the existing update comment
      serverConfigContent = serverConfigContent.replace(
        /\/\/ Updated by deployDonationSystem script on .*/,
        updateComment
      );
    }
    
    // Update the Don and Donation addresses
    // We need to handle different possible formats in the existing file
    
    // Update don address
    const donRegex = /(don\s*:\s*['"])([^'"]*)(["'])/;
    if (donRegex.test(serverConfigContent)) {
      serverConfigContent = serverConfigContent.replace(donRegex, `$1${donAddress}$3`);
    } else {
      console.log("Could not find don address in the server config file.");
      console.log("Please update the don address manually.");
    }
    
    // Update donation address
    const donationRegex = /(donation\s*:\s*['"])([^'"]*)(["'])/;
    if (donationRegex.test(serverConfigContent)) {
      serverConfigContent = serverConfigContent.replace(donationRegex, `$1${donationAddress}$3`);
    } else {
      console.log("Could not find donation address in the server config file.");
      console.log("Please update the donation address manually.");
    }
    
    // Write the updated server config file
    fs.writeFileSync(serverUtilPath, serverConfigContent);
    console.log(`Updated server config file at: ${serverUtilPath}`);
    console.log(`- Don address updated to: ${donAddress}`);
    console.log(`- Donation address updated to: ${donationAddress}`);
  }
  
  // Copy ABI and bytecode files to the frontend
  console.log("\nCopying ABI and bytecode files to the frontend...");
  
  // Create ABI and bytecode directories if they don't exist
  if (!fs.existsSync(frontendAbiDir)) {
    fs.mkdirSync(frontendAbiDir, { recursive: true });
    console.log(`Created ABI directory at: ${frontendAbiDir}`);
  }
  
  if (!fs.existsSync(frontendBytecodeDir)) {
    fs.mkdirSync(frontendBytecodeDir, { recursive: true });
    console.log(`Created bytecode directory at: ${frontendBytecodeDir}`);
  }
  
  // Define paths for contract artifacts
  const donArtifactPath = path.join(__dirname, '../../artifacts/contracts/tokens/Don.sol/Don.json');
  const donationArtifactPath = path.join(__dirname, '../../artifacts/contracts/donating/Donation.sol/Donation.json');
  
  // Check if artifact files exist
  if (!fs.existsSync(donArtifactPath)) {
    console.log(`Don artifact not found at: ${donArtifactPath}`);
    console.log("Please compile the contracts first.");
  } else {
    try {
      // Read the Don artifact
      const donArtifact = JSON.parse(fs.readFileSync(donArtifactPath, 'utf8'));
      
      // Extract ABI and bytecode
      const donAbi = JSON.stringify(donArtifact.abi, null, 2);
      const donBytecode = JSON.stringify({ bytecode: donArtifact.bytecode }, null, 2);
      
      // Write ABI and bytecode files
      fs.writeFileSync(path.join(frontendAbiDir, "Don.json"), donAbi);
      fs.writeFileSync(path.join(frontendBytecodeDir, "Don.json"), donBytecode);
      
      console.log(`Copied Don ABI and bytecode to frontend`);
    } catch (error) {
      console.error(`Error copying Don ABI and bytecode:`, error);
    }
  }
  
  // Check if Donation artifact file exists
  if (!fs.existsSync(donationArtifactPath)) {
    console.log(`Donation artifact not found at: ${donationArtifactPath}`);
    console.log("Please compile the contracts first.");
  } else {
    try {
      // Read the Donation artifact
      const donationArtifact = JSON.parse(fs.readFileSync(donationArtifactPath, 'utf8'));
      
      // Extract ABI and bytecode
      const donationAbi = JSON.stringify(donationArtifact.abi, null, 2);
      const donationBytecode = JSON.stringify({ bytecode: donationArtifact.bytecode }, null, 2);
      
      // Write ABI and bytecode files
      fs.writeFileSync(path.join(frontendAbiDir, "Donation.json"), donationAbi);
      fs.writeFileSync(path.join(frontendBytecodeDir, "Donation.json"), donationBytecode);
      
      console.log(`Copied Donation ABI and bytecode to frontend`);
    } catch (error) {
      console.error(`Error copying Donation ABI and bytecode:`, error);
    }
  }
  
  console.log("\nFrontend update completed successfully!");
}

async function main() {
  // Configuration
  const PRIVATE_KEY = process.env.PRIVATE_KEY;
  if (!PRIVATE_KEY) {
    console.error('Please set your PRIVATE_KEY in a .env file');
    process.exit(1);
  }

  // Connect to the network
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL || 'https://base-sepolia.g.alchemy.com/v2/YOUR_API_KEY');
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  
  console.log(`Using wallet address: ${wallet.address}`);
  
  // Configuration parameters
  const uri = process.env.DON_BASE_URI || "https://metadata.poscidondao.org/don/";
  const admin = process.env.ADMIN_ADDRESS || wallet.address;
  const researchFundingWallet = process.env.RESEARCH_FUNDING_WALLET || "0x695f64829F0764FE1e95Fa32CD5c794A1a5034AF";
  const treasuryWallet = process.env.TREASURY_WALLET || admin;
  const usdc = process.env.USDC_ADDRESS || "0x08D39BBFc0F63668d539EA8BF469dfdeBAe58246";
  
  // Load contract ABIs
  const donAbiPath = path.join(__dirname, '../../artifacts/contracts/tokens/Don.sol/Don.json');
  const donationAbiPath = path.join(__dirname, '../../artifacts/contracts/donating/Donation.sol/Donation.json');
  
  const donAbi = JSON.parse(fs.readFileSync(donAbiPath, 'utf8')).abi;
  const donationAbi = JSON.parse(fs.readFileSync(donationAbiPath, 'utf8')).abi;
  
  // Load contract bytecode
  const donBytecode = JSON.parse(fs.readFileSync(donAbiPath, 'utf8')).bytecode;
  const donationBytecode = JSON.parse(fs.readFileSync(donationAbiPath, 'utf8')).bytecode;
  
  // Deploy DON token
  console.log('\nDeploying DON token...');
  const donFactory = new ethers.ContractFactory(donAbi, donBytecode, wallet);
  const donContract = await donFactory.deploy(uri, treasuryWallet);
  await donContract.deployTransaction.wait();
  console.log(`DON token deployed at: ${donContract.address}`);
  
  // Deploy Donation contract
  console.log('\nDeploying Donation contract...');
  const donationFactory = new ethers.ContractFactory(donationAbi, donationBytecode, wallet);
  const donationContract = await donationFactory.deploy(
    researchFundingWallet,
    treasuryWallet,
    usdc,
    donContract.address
  );
  await donationContract.deployTransaction.wait();
  console.log(`Donation contract deployed at: ${donationContract.address}`);
  
  // Set the Donation address in the DON token
  console.log('\nSetting Donation address in DON token...');
  
  try {
    // Check current donation address
    const donationAddress = await donContract.donationAddress();
    console.log(`Current donation address: ${donationAddress}`);
    
    // If the donation address is already set correctly, we're done
    if (donationAddress.toLowerCase() === donationContract.address.toLowerCase()) {
      console.log("Donation address is already set correctly.");
    } else {
      // Set the donation address
      console.log("Setting donation address...");
      const setDonationTx = await donContract.setDonation(donationContract.address);
      await setDonationTx.wait();
      console.log('Donation address set in DON token');
      
      // Optionally freeze the donation address if needed
      // Uncomment the following lines if you want to freeze the donation address after setting it
      /*
      console.log("Freezing donation address...");
      const freezeTx = await donContract.freezeDonation();
      await freezeTx.wait();
      console.log("Donation address frozen successfully.");
      */
    }
  } catch (error) {
    console.error("Error interacting with DON token:", error);
  }
  
  // Save deployed addresses to a JSON file
  const deployedAddresses = {
    don: donContract.address,
    donation: donationContract.address,
    network: process.env.NETWORK || 'unknown',
    deploymentTimestamp: new Date().toISOString()
  };
  
  const jsonOutputPath = path.join(__dirname, '../donationAddresses.json');
  fs.writeFileSync(jsonOutputPath, JSON.stringify(deployedAddresses, null, 2));
  console.log(`\nDeployment addresses saved to: ${jsonOutputPath}`);
  
  // Update frontend with deployed addresses
  await updateFrontendAddresses(donContract.address, donationContract.address);
  
  console.log('\nDeployment completed successfully!');
  console.log('DON token:', donContract.address);
  console.log('Donation contract:', donationContract.address);
}

// Execute the script
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 